// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Plane.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
#region Messages
public sealed class PlaneFly : pb::IMessage {
  private static readonly pb::MessageParser<PlaneFly> _parser = new pb::MessageParser<PlaneFly>(() => new PlaneFly());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlaneFly> Parser { get { return _parser; } }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "Px" field.</summary>
  public const int PxFieldNumber = 2;
  private float px_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Px {
    get { return px_; }
    set {
      px_ = value;
    }
  }

  /// <summary>Field number for the "Py" field.</summary>
  public const int PyFieldNumber = 3;
  private float py_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Py {
    get { return py_; }
    set {
      py_ = value;
    }
  }

  /// <summary>Field number for the "Pz" field.</summary>
  public const int PzFieldNumber = 4;
  private float pz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Pz {
    get { return pz_; }
    set {
      pz_ = value;
    }
  }

  /// <summary>Field number for the "Rx" field.</summary>
  public const int RxFieldNumber = 5;
  private float rx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rx {
    get { return rx_; }
    set {
      rx_ = value;
    }
  }

  /// <summary>Field number for the "Ry" field.</summary>
  public const int RyFieldNumber = 6;
  private float ry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ry {
    get { return ry_; }
    set {
      ry_ = value;
    }
  }

  /// <summary>Field number for the "Rz" field.</summary>
  public const int RzFieldNumber = 7;
  private float rz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rz {
    get { return rz_; }
    set {
      rz_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Px != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Px);
    }
    if (Py != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Py);
    }
    if (Pz != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Pz);
    }
    if (Rx != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Rx);
    }
    if (Ry != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Ry);
    }
    if (Rz != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Rz);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Px != 0F) {
      size += 1 + 4;
    }
    if (Py != 0F) {
      size += 1 + 4;
    }
    if (Pz != 0F) {
      size += 1 + 4;
    }
    if (Rx != 0F) {
      size += 1 + 4;
    }
    if (Ry != 0F) {
      size += 1 + 4;
    }
    if (Rz != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 21: {
          Px = input.ReadFloat();
          break;
        }
        case 29: {
          Py = input.ReadFloat();
          break;
        }
        case 37: {
          Pz = input.ReadFloat();
          break;
        }
        case 45: {
          Rx = input.ReadFloat();
          break;
        }
        case 53: {
          Ry = input.ReadFloat();
          break;
        }
        case 61: {
          Rz = input.ReadFloat();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
